version: '3.3'

volumes:
  db_kong:
  db_konga:
  db_identity:
  db_order:
  db_delivery:

services:

  #######################################
  # Kong:
  #######################################
  db_kong:
    container_name: pds_db_kong
    image: postgres:9.6
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong123
      POSTGRES_DB: kong
    volumes:
      - db_kong:/var/lib/postgresql/data

  kong_migration:
    container_name: pds_kong_migration
    image: kong:latest
    command: "kong migrations bootstrap"
    restart: on-failure
    depends_on:
      - db_kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db_kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong123

  kong:
    container_name: pds_kong
    image: kong:latest
    restart: always
    depends_on:
      - kong_migration
      - db_kong
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://kong:8001" ]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db_kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong123
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_LISTEN_SSL: 0.0.0.0:8444

  db_konga:
    container_name: pds_db_konga
    image: postgres:9.6
    environment:
      POSTGRES_USER: konga
      POSTGRES_PASSWORD: konga123
      POSTGRES_DB: konga
    volumes:
      - db_konga:/var/lib/postgresql/data

  konga:
    container_name: pds_konga
    image: pantsel/konga
    ports:
      - "1337:1337"
    restart: "on-failure"
    depends_on:
      - kong
      - db_konga
    environment:
#      NODE_ENV: production
      DB_HOST: db_konga
      DB_USER: konga
      DB_PASSWORD: konga123

  #######################################
  # End Kong
  #######################################

  zipkin:
    container_name: pds_zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped

  redis:
    container_name: pds_redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    restart: always

  zookeeper:
    container_name: pds_zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: pds_kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    container_name: pds_kafdrop
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    expose:
      - 9000
    depends_on:
      - zookeeper
      - kafka
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKERCONNECT: kafka:9092

  db_identity:
    container_name: pds_delivery_identity_db
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: identity
      POSTGRES_PASSWORD: identity123
      POSTGRES_DB: delivery_identity
    volumes:
      - db_identity:/var/lib/postgresql/data

  db_order:
    container_name: pds_delivery_order_db
    image: postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: order
      POSTGRES_PASSWORD: order123
      POSTGRES_DB: delivery_order
    volumes:
      - db_order:/var/lib/postgresql/data

  db_delivery:
    container_name: pds_delivery_parcel_db
    image: postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: delivery
      POSTGRES_PASSWORD: delivery123
      POSTGRES_DB: delivery_parcel
    volumes:
      - db_delivery:/var/lib/postgresql/data

  api-swagger:
    container_name: pds_api-swagger
    image: pds/api-swagger:1.0
    ports:
      - "9090:9090"
    restart: unless-stopped
    build:
      context: api-swagger
      dockerfile: Dockerfile
    depends_on:
      - ms-identity
      - ms-order
      - ms-delivery

  ms-identity:
    container_name: pds_ms-identity
    image: pds/ms-identity:1.0
    ports:
      - "8081:8081"
    restart: unless-stopped
    build:
      context: ms-identity
      dockerfile: Dockerfile
    depends_on:
      - db_identity
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db_identity:5432/delivery_identity
      APPLICATION_REDIS_ADDRESS: redis://redis:6379

  ms-order:
    container_name: pds_ms-order
    image: pds/ms-order:1.0
    ports:
      - "8082:8082"
    restart: unless-stopped
    build:
      context: ms-order
      dockerfile: Dockerfile
    depends_on:
      - db_order
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db_order:5432/delivery_order
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092

  ms-delivery:
    container_name: pds_ms-delivery
    image: pds/ms-delivery:1.0
    ports:
      - "8083:8083"
    restart: unless-stopped
    build:
      context: ms-delivery
      dockerfile: Dockerfile
    depends_on:
      - db_delivery
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db_delivery:5432/delivery_parcel
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092

  ms-notification:
    container_name: pds_ms-notification
    image: pds/ms-notification:1.0
    ports:
      - "8084:8084"
    restart: unless-stopped
    build:
      context: ms-notification
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092