version: '3.3'
services:

  redis:
    container_name: pds_redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    restart: always

  zookeeper:
    container_name: pds_zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: pds_kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    container_name: pds_kafdrop
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    expose:
      - 9000
    depends_on:
      - zookeeper
      - kafka
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKERCONNECT: kafka:9092

  db_identity:
    container_name: pds_delivery_identity_db
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: identity
      POSTGRES_PASSWORD: identity123
      POSTGRES_DB: delivery_identity

  db_order:
    container_name: pds_delivery_order_db
    image: postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: order
      POSTGRES_PASSWORD: order123
      POSTGRES_DB: delivery_order

  db_delivery:
    container_name: pds_delivery_parcel_db
    image: postgres
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: delivery
      POSTGRES_PASSWORD: delivery123
      POSTGRES_DB: delivery_parcel

#  api-gateway:
#    container_name: pds_api-gateway
#    image: pds/api-gateway:1.0
#    ports:
#      - "8080:8080"
#    restart: unless-stopped
#    build:
#      context: api-gateway
#      dockerfile: Dockerfile
#    environment:
#      ZUUL_ROUTES_MS-IDENTITY_URL: http://ms-identity:8081
#      ZUUL_ROUTES_MS-ORDER_URL: http://ms-order:8082
#      ZUUL_ROUTES_MS-DELIVERY_URL: http://ms-delivery:8083
#
#  ms-identity:
#    container_name: pds_ms-identity
#    image: pds/ms-identity:1.0
#    ports:
#      - "8081:8081"
#    restart: unless-stopped
#    build:
#      context: ms-identity
#      dockerfile: Dockerfile
#    depends_on:
#      - db_identity
#      - redis
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db_identity:5432/delivery_identity
#      APPLICATION_REDIS_ADDRESS: redis://redis:6379
#
#  ms-order:
#    container_name: pds_ms-order
#    image: pds/ms-order:1.0
#    ports:
#      - "8082:8082"
#    restart: unless-stopped
#    build:
#      context: ms-order
#      dockerfile: Dockerfile
#    depends_on:
#      - db_order
#      - kafka
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db_order:5432/delivery_order
#      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
#
#  ms-delivery:
#    container_name: pds_ms-delivery
#    image: pds/ms-delivery:1.0
#    ports:
#      - "8083:8083"
#    restart: unless-stopped
#    build:
#      context: ms-delivery
#      dockerfile: Dockerfile
#    depends_on:
#      - db_delivery
#      - kafka
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db_delivery:5432/delivery_parcel
#      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
#
#  ms-notification:
#    container_name: pds_ms-notification
#    image: pds/ms-notification:1.0
#    ports:
#      - "8084:8084"
#    restart: unless-stopped
#    build:
#      context: ms-notification
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#    environment:
#      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092